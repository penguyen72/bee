// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organization   Organizations  @relation(fields: [organizationId], references: [id])
  organizationId String         @db.ObjectId
  firstName      String?
  phoneNumber    String
  birthday       DateTime?
  visitCount     Int
  currentPoints  Int
  lifetimePoints Int
  Transactions   Transactions[]

  @@unique(fields: [phoneNumber, organizationId], name: "customer_identifier")
}

model Transactions {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String        @db.ObjectId
  organization   Organizations @relation(fields: [organizationId], references: [id])
  customerId     String        @db.ObjectId
  customer       Customer      @relation(fields: [customerId], references: [id])
  checkInTime    DateTime
  checkOutTime   DateTime?
  profit         Float?
  expense        Float?
  pointsEarned   Int?
  pointsRedeemed Int?
  currentPoints  Int
}

model Organizations {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  businessName String
  address      String
  city         String
  state        String
  zipCode      String
  timezone     String
  phoneNumber  String
  emailAddress String         @unique
  Transactions Transactions[]
  Customer     Customer[]
  Promotion    Promotion[]
}

model Promotion {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  organizationId    String        @db.ObjectId
  organization      Organizations @relation(fields: [organizationId], references: [id])
  title             String
  unit              String
  type              String
  value             Int
  expiration        DateTime
  deliveredMessages Int
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
